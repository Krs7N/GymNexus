// <auto-generated />
using System;
using GymNexus.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymNexus.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GymNexus.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The URL representation of the user's profile picture");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Application user entity representation in the system. Extends the default IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = "60889746-673c-4e86-8040-c4465e10c8b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6148cbdc-31c9-4868-aff9-85935540478f",
                            Email = "root@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOT@ABV.BG",
                            NormalizedUserName = "ROOT@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEBnG3rhSmwEo8a7C31JLBZnddZu12KC7BsFlampz/glPqDkmmgKs5xa7e1XxYN8GXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45dbf073-7416-458a-8a49-c7c4415793d4",
                            TwoFactorEnabled = false,
                            UserName = "root@abv.bg"
                        },
                        new
                        {
                            Id = "76bb4713-0ad4-4e3e-a356-d3f24a435ec9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "160e64f8-e545-43a0-bc3b-b0caa71b9f24",
                            Email = "test@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@ABV.BG",
                            NormalizedUserName = "TEST@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEPNG7Rl1vqS5uVRyTEcQ3uiTiy3/akA7aQ75UYjCjijGc68lyAhU6VhIY7oLXwMvtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f918d4e-39b5-4a84-9618-7f0454b870aa",
                            TwoFactorEnabled = false,
                            UserName = "test@abv.bg"
                        });
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the category");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("The status of the category. If it is active or not");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the category");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasComment("Category entity representation in the system");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Special whey protein made by Kevin Levrone's own brand",
                            IsActive = true,
                            Name = "Protein Whey"
                        },
                        new
                        {
                            Id = 2,
                            Description = "This is the default brand of proteins that we can give you for now",
                            IsActive = true,
                            Name = "Protein"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Creatine is a substance that is found in small amounts in the body. It is also found in certain foods and can be taken as a dietary supplement. Creatine is involved in producing the energy that muscles need to work.",
                            IsActive = true,
                            Name = "Creatine"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Creatine Monohydrate is of the more advanced types of creatine out there. It is one of the most researched supplements worldwide and can help the brain activity!",
                            IsActive = true,
                            Name = "Creatine Monohydrate"
                        });
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the comment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The content of the comment");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The unique identifier of the creator of the comment. It is set on creation of the comment");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the comment was added to the system");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("The status of the comment. Represents if it is active or not. Comments could be deleted");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the post that the comment is related to");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasComment("Comment entity representation in the system");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Marketplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the marketplace");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The address of the marketplace");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the marketplace");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("The status of the marketplace. If it is active or not");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12,9)")
                        .HasComment("The latitude coordinate representation of the marketplace");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12,9)")
                        .HasComment("The longitude coordinate representation of the marketplace");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the marketplace");

                    b.HasKey("Id");

                    b.ToTable("Marketplaces");

                    b.HasComment("Marketplace entity representation in the system");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Boulevard \"Cherni vrah\" 25, Sofia",
                            Description = "Fitness1 is a marketplace that offers a wide range of fitness products and supplements.",
                            IsActive = true,
                            Latitude = 42.6777m,
                            Longitude = 23.3221m,
                            Name = "Fitness1 Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Mladost 4, 1715, Sofia",
                            Description = "Pulse Gym Shop offers various supplements and gym equipment. The store is part of the Pulse brand which has its own gym's all around the country",
                            IsActive = true,
                            Latitude = 42.62518m,
                            Longitude = 23.373451m,
                            Name = "Pulse Gym Shop"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Lyuben Karavelov 21, 9002, Varna",
                            Description = "Sila BG is one of the leading brands in Bulgaria. A recent new-comer but with a high demand with various range of products.",
                            IsActive = true,
                            Latitude = 43.20887m,
                            Longitude = 27.92242m,
                            Name = "Sila BG"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Adam Mitskevich 5, 8001, Burgas",
                            Description = "Fitness1 is a marketplace that offers a wide range of fitness products and supplements.",
                            IsActive = true,
                            Latitude = 42.50064m,
                            Longitude = 27.47921m,
                            Name = "Fitness1 Burgas"
                        });
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the order");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The unique identifier of the user who made the order");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the order was made. Set on creation of the order");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("The status of the order. Represents if it is active or not. Set to true by default");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The payment method for the order");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The quantity of the products in the order");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The status of the order");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the store from which the order was made");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)")
                        .HasComment("The total price of the order");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(4,2)")
                        .HasComment("The price for a unit in the order");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");

                    b.HasComment("Order entity representation in the system");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the order");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the product that is included in the order");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersDetails");

                    b.HasComment("The order details of an order with the different products entity representation in the system");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the post");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The content of the post");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The unique identifier of the creator of the post");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the post was added to the system");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The URL representation of the post's image. Post could have no image inserted");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("The status of the post. If it is active or not. Set to true by default");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The title of the post");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Posts");

                    b.HasComment("Post entity representation in the system");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Welcome to GymNexus! This is a social network for fitness enthusiasts. Share your progress, ask for advice, and connect with other people who share your passion for fitness.",
                            CreatedBy = "60889746-673c-4e86-8040-c4465e10c8b7",
                            CreatedOn = new DateTime(2024, 3, 2, 15, 34, 22, 992, DateTimeKind.Local).AddTicks(7882),
                            IsActive = true,
                            Title = "Welcome to GymNexus"
                        },
                        new
                        {
                            Id = 2,
                            Content = "To get started, create an account and start sharing your fitness journey with the world. You can also connect with other users and see their progress.",
                            CreatedBy = "60889746-673c-4e86-8040-c4465e10c8b7",
                            CreatedOn = new DateTime(2024, 1, 7, 15, 34, 22, 992, DateTimeKind.Local).AddTicks(7937),
                            IsActive = true,
                            Title = "How to get started"
                        },
                        new
                        {
                            Id = 3,
                            Content = "I am looking to start increasing my bench press and bench more, and put more pressure on my chest muscles. I am looking for advices, thanks in advance!",
                            CreatedBy = "60889746-673c-4e86-8040-c4465e10c8b7",
                            CreatedOn = new DateTime(2023, 3, 7, 15, 34, 22, 992, DateTimeKind.Local).AddTicks(7941),
                            IsActive = true,
                            Title = "How can I bench more?"
                        });
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.PostLike", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the post");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The unique identifier of the user who liked the post");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostsLikes");

                    b.HasComment("Post like entity representation in the system. Represents the amount of likes the post has received");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the product");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the category that the product belongs to");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the product was added to the system");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the product");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The URL representation of the product's image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Determines whether the product is still active in the system or not");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The name of the product");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(4,2)")
                        .HasComment("The price of the product");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the store that is selling the current product");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasComment("Product entity representation in a user's store");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2024, 3, 2, 15, 34, 22, 992, DateTimeKind.Local).AddTicks(9074),
                            Description = "Special whey protein made by Kevin Levrone's own brand. Comes in 2000 grams package, with a spoon that is 30g and recommended daily usage of 30g",
                            ImageUrl = "https://www.kevinlevrone.com/wp-content/uploads/2021/06/levrone-whey-protein-2000g.jpg",
                            IsActive = true,
                            Name = "Kevin Levrone's Whey Protein",
                            Price = 50.00m,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2024, 1, 7, 15, 34, 22, 992, DateTimeKind.Local).AddTicks(9080),
                            Description = "This is the default brand of proteins that we can give you for now. Comes in 1000 grams package, with a spoon that is 30g and recommended daily usage of 30g",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/bf5a31e851f50f3ed6850cbbf183db11/j/u/just_whey_chocolate_milkshake_1_kg_gymbeam_1.png",
                            IsActive = true,
                            Name = "Protein",
                            Price = 26.00m,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.ProductLike", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the product");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The unique identifier of the user who liked the product");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductsLikes");

                    b.HasComment("Product like entity representation in the system. Represents the amount of likes the product has received");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the store");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(2,2)")
                        .HasComment("The average rating that the store has received up to this moment");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the store was added to the system, and created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the store");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("The status of the store. If it is active or not");

                    b.Property<int?>("MarketplaceId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the store's marketplace. The store initially starts without a marketplace and can continue be without one");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The name of the store");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The unique identifier of the store's owner");

                    b.Property<int>("RatingsCount")
                        .HasColumnType("int")
                        .HasComment("The count of all ratings that the store has received up to this moment");

                    b.HasKey("Id");

                    b.HasIndex("MarketplaceId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Stores");

                    b.HasComment("Store entity representation in the system");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 0m,
                            CreatedOn = new DateTime(2024, 3, 7, 15, 34, 22, 992, DateTimeKind.Local).AddTicks(8615),
                            Description = "This is the Root's store that is created to be useful for you and easier to start with. It is owned by the root user.",
                            IsActive = true,
                            MarketplaceId = 1,
                            Name = "Root's local Gym Shop",
                            OwnerId = "60889746-673c-4e86-8040-c4465e10c8b7",
                            RatingsCount = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3436ba36-b7db-449b-a338-9d5891cb4c0f",
                            ConcurrencyStamp = "3436ba36-b7db-449b-a338-9d5891cb4c0f",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "b558b524-6d2f-4a8e-9eb5-4b02cdd0a61c",
                            ConcurrencyStamp = "b558b524-6d2f-4a8e-9eb5-4b02cdd0a61c",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "fe5c5c3c-e055-4bb7-bcbc-fdd8f9b449e7",
                            ConcurrencyStamp = "fe5c5c3c-e055-4bb7-bcbc-fdd8f9b449e7",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "60889746-673c-4e86-8040-c4465e10c8b7",
                            RoleId = "3436ba36-b7db-449b-a338-9d5891cb4c0f"
                        },
                        new
                        {
                            UserId = "60889746-673c-4e86-8040-c4465e10c8b7",
                            RoleId = "b558b524-6d2f-4a8e-9eb5-4b02cdd0a61c"
                        },
                        new
                        {
                            UserId = "60889746-673c-4e86-8040-c4465e10c8b7",
                            RoleId = "fe5c5c3c-e055-4bb7-bcbc-fdd8f9b449e7"
                        },
                        new
                        {
                            UserId = "76bb4713-0ad4-4e3e-a356-d3f24a435ec9",
                            RoleId = "3436ba36-b7db-449b-a338-9d5891cb4c0f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymNexus.Infrastructure.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymNexus.Infrastructure.Data.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.OrderDetail", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymNexus.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Post", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.PostLike", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.Models.Post", "Post")
                        .WithMany("PostsLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymNexus.Infrastructure.Data.Models.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.ProductLike", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("ProductsLikes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Store", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.Models.Marketplace", "Marketplace")
                        .WithMany("Stores")
                        .HasForeignKey("MarketplaceId");

                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", "Owner")
                        .WithMany("Stores")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketplace");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GymNexus.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Marketplace", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostsLikes");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("ProductsLikes");
                });

            modelBuilder.Entity("GymNexus.Infrastructure.Data.Models.Store", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
